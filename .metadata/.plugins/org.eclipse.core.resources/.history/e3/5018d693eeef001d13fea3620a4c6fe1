package com.poc.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import com.poc.payload.ApiResposne;

@RestControllerAdvice
public class MyExceptionHandler {

	@ExceptionHandler(ResouceNotFoundException.class)
	public ResponseEntity<ApiResposne> handleResourceNotFoundException(ResouceNotFoundException ex)
	{	
		System.out.println("exception...............");
		String message = ex.getMessage();
		ApiResposne response = new ApiResposne(message,true, HttpStatus.NOT_FOUND);
		return new ResponseEntity<ApiResposne>(response, HttpStatus.NOT_FOUND);
		
	}
	
	
	/*
	 * @ExceptionHandler(RuntimeException.class) public ResponseEntity<ApiResposne>
	 * handleResourceNotFoundException(RuntimeException exception) {
	 * System.out.println("exception..............."); ApiResposne response = new
	 * ApiResposne(exception.getMessage(), HttpStatus.NOT_FOUND); return new
	 * ResponseEntity<ApiResposne>(response, HttpStatus.NOT_FOUND);
	 * 
	 * }
	 */
}

@RestControllerAdvice
public class GloblaExceptionHandle {
	
	@ExceptionHandler(ResouceNotFoundException.class)
	public ResponseEntity<ApiResponse> hnadleResourceNotFoundException(ResouceNotFoundException ex)
	{
		String message = ex.getMessage();
	//	ApiResponse api = new ApiResponse(message,true,HttpStatus.NOT_FOUND);
		//ApiResponse response = ApiResponse.builder().message(message).success(true).status(HttpStatus.NOT_FOUND).build();
		ApiResponse response = new ApiResponse(message,true,HttpStatus.NOT_FOUND);
		
		return new ResponseEntity<ApiResponse>(response,HttpStatus.NOT_FOUND);
		
	}
}